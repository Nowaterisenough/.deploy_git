<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Design Patterns 设计模式</title>
    <link href="/2023/05/19/design-patterns/"/>
    <url>/2023/05/19/design-patterns/</url>
    
    <content type="html"><![CDATA[<h2 id="Factory-Method-工厂方法模式"><a href="#Factory-Method-工厂方法模式" class="headerlink" title="Factory Method 工厂方法模式"></a>Factory Method 工厂方法模式</h2><p>亦称虚拟构造函数、Virtual Constructor、Factory Method</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>工厂方法模式是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token comment">/** * The Product interface declares the operations that all concrete products must * implement. */</span><span class="token keyword">class</span> <span class="token class-name">Product</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Concrete Products provide various implementations of the Product interface. */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Product</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  std<span class="token double-colon punctuation">::</span>string <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"&#123;Result of the ConcreteProduct1&#125;"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Product</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  std<span class="token double-colon punctuation">::</span>string <span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"&#123;Result of the ConcreteProduct2&#125;"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * The Creator class declares the factory method that is supposed to return an * object of a Product class. The Creator's subclasses usually provide the * implementation of this method. */</span><span class="token keyword">class</span> <span class="token class-name">Creator</span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * Note that the Creator may also provide some default implementation of the   * factory method.   */</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Creator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">virtual</span> Product <span class="token operator">*</span><span class="token function">FactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/**   * Also note that, despite its name, the Creator's primary responsibility is   * not creating products. Usually, it contains some core business logic that   * relies on Product objects, returned by the factory method. Subclasses can   * indirectly change that business logic by overriding the factory method and   * returning a different type of product from it.   */</span>  std<span class="token double-colon punctuation">::</span>string <span class="token function">SomeOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">// Call the factory method to create a Product object.</span>    Product <span class="token operator">*</span>product <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">FactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Now, use the product.</span>    std<span class="token double-colon punctuation">::</span>string result <span class="token operator">=</span> <span class="token string">"Creator: The same creator's code has just worked with "</span> <span class="token operator">+</span> product<span class="token operator">-></span><span class="token function">Operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> product<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * Concrete Creators override the factory method in order to change the * resulting product's type. */</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCreator1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Creator</span></span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * Note that the signature of the method still uses the abstract product type,   * even though the concrete product is actually returned from the method. This   * way the Creator can stay independent of concrete product classes.   */</span><span class="token keyword">public</span><span class="token operator">:</span>  Product <span class="token operator">*</span><span class="token function">FactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCreator2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Creator</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>  Product <span class="token operator">*</span><span class="token function">FactoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * The client code works with an instance of a concrete creator, albeit through * its base interface. As long as the client keeps working with the creator via * the base interface, you can pass it any creator's subclass. */</span><span class="token keyword">void</span> <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token keyword">const</span> Creator <span class="token operator">&amp;</span>creator<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Client: I'm not aware of the creator's class, but it still works.\n"</span>            <span class="token operator">&lt;&lt;</span> creator<span class="token punctuation">.</span><span class="token function">SomeOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">/** * The Application picks a creator's type depending on the configuration or * environment. */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"App: Launched with the ConcreteCreator1.\n"</span><span class="token punctuation">;</span>  Creator <span class="token operator">*</span>creator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ConcreteCreator1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token operator">*</span>creator<span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"App: Launched with the ConcreteCreator2.\n"</span><span class="token punctuation">;</span>  Creator <span class="token operator">*</span>creator2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ConcreteCreator2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ClientCode</span><span class="token punctuation">(</span><span class="token operator">*</span>creator2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> creator<span class="token punctuation">;</span>  <span class="token keyword">delete</span> creator2<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">App: Launched with the ConcreteCreator1.Client: I'm not aware of the creator's class, but it still works.Creator: The same creator's code has just worked with &#123;Result of the ConcreteProduct1&#125;App: Launched with the ConcreteCreator2.Client: I'm not aware of the creator's class, but it still works.Creator: The same creator's code has just worked with &#123;Result of the ConcreteProduct2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><style>  .markdown-body pre code {    font-family: Monaco, monospace !important;     font-size: 90% !important;     line-height: 1.8 !important; }</style>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/19/hello-world/"/>
    <url>/2023/05/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
