<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Design Patterns 设计模式</title>
    <link href="/2023/05/19/design-patterns/"/>
    <url>/2023/05/19/design-patterns/</url>
    
    <content type="html"><![CDATA[<h2 id="Factory-Method-工厂方法模式"><a href="#Factory-Method-工厂方法模式" class="headerlink" title="Factory Method 工厂方法模式"></a>Factory Method 工厂方法模式</h2><p>亦称虚拟构造函数、Virtual Constructor、Factory Method</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>工厂方法模式是一种创建型设计模式， 其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The Product interface declares the operations that all concrete products must</span><br><span class="hljs-comment"> * implement.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Product</span>() &#123;&#125;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> std::string <span class="hljs-title">Operation</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Concrete Products provide various implementations of the Product interface.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct1</span> : <span class="hljs-keyword">public</span> Product &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">std::string <span class="hljs-title">Operation</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;Result of the ConcreteProduct1&#125;&quot;</span>;<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteProduct2</span> : <span class="hljs-keyword">public</span> Product &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">std::string <span class="hljs-title">Operation</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;Result of the ConcreteProduct2&#125;&quot;</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The Creator class declares the factory method that is supposed to return an</span><br><span class="hljs-comment"> * object of a Product class. The Creator&#x27;s subclasses usually provide the</span><br><span class="hljs-comment"> * implementation of this method.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Creator</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Note that the Creator may also provide some default implementation of the</span><br><span class="hljs-comment">   * factory method.</span><br><span class="hljs-comment">   */</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Creator</span>()&#123;&#125;;<br>  <span class="hljs-function"><span class="hljs-keyword">virtual</span> Product* <span class="hljs-title">FactoryMethod</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Also note that, despite its name, the Creator&#x27;s primary responsibility is</span><br><span class="hljs-comment">   * not creating products. Usually, it contains some core business logic that</span><br><span class="hljs-comment">   * relies on Product objects, returned by the factory method. Subclasses can</span><br><span class="hljs-comment">   * indirectly change that business logic by overriding the factory method and</span><br><span class="hljs-comment">   * returning a different type of product from it.</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-function">std::string <span class="hljs-title">SomeOperation</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-comment">// Call the factory method to create a Product object.</span><br>    Product* product = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">FactoryMethod</span>();<br>    <span class="hljs-comment">// Now, use the product.</span><br>    std::string result = <span class="hljs-string">&quot;Creator: The same creator&#x27;s code has just worked with &quot;</span> + product-&gt;<span class="hljs-built_in">Operation</span>();<br>    <span class="hljs-keyword">delete</span> product;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Concrete Creators override the factory method in order to change the</span><br><span class="hljs-comment"> * resulting product&#x27;s type.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCreator1</span> : <span class="hljs-keyword">public</span> Creator &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Note that the signature of the method still uses the abstract product type,</span><br><span class="hljs-comment">   * even though the concrete product is actually returned from the method. This</span><br><span class="hljs-comment">   * way the Creator can stay independent of concrete product classes.</span><br><span class="hljs-comment">   */</span><br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">Product* <span class="hljs-title">FactoryMethod</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteProduct1</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteCreator2</span> : <span class="hljs-keyword">public</span> Creator &#123;<br> <span class="hljs-keyword">public</span>:<br>  <span class="hljs-function">Product* <span class="hljs-title">FactoryMethod</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">override</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteProduct2</span>();<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The client code works with an instance of a concrete creator, albeit through</span><br><span class="hljs-comment"> * its base interface. As long as the client keeps working with the creator via</span><br><span class="hljs-comment"> * the base interface, you can pass it any creator&#x27;s subclass.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ClientCode</span><span class="hljs-params">(<span class="hljs-type">const</span> Creator&amp; creator)</span> </span>&#123;<br>  <span class="hljs-comment">// ...</span><br>  std::cout &lt;&lt; <span class="hljs-string">&quot;Client: I&#x27;m not aware of the creator&#x27;s class, but it still works.\n&quot;</span><br>            &lt;&lt; creator.<span class="hljs-built_in">SomeOperation</span>() &lt;&lt; std::endl;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The Application picks a creator&#x27;s type depending on the configuration or</span><br><span class="hljs-comment"> * environment.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;App: Launched with the ConcreteCreator1.\n&quot;</span>;<br>  Creator* creator = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteCreator1</span>();<br>  <span class="hljs-built_in">ClientCode</span>(*creator);<br>  std::cout &lt;&lt; std::endl;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;App: Launched with the ConcreteCreator2.\n&quot;</span>;<br>  Creator* creator2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ConcreteCreator2</span>();<br>  <span class="hljs-built_in">ClientCode</span>(*creator2);<br><br>  <span class="hljs-keyword">delete</span> creator;<br>  <span class="hljs-keyword">delete</span> creator2;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">App: Launched with the ConcreteCreator1.<br>Client: I&#x27;m not aware of the creator&#x27;s class, but it still works.<br>Creator: The same creator&#x27;s code has just worked with &#123;Result of the ConcreteProduct1&#125;<br><br>App: Launched with the ConcreteCreator2.<br>Client: I&#x27;m not aware of the creator&#x27;s class, but it still works.<br>Creator: The same creator&#x27;s code has just worked with &#123;Result of the ConcreteProduct2&#125;<br></code></pre></td></tr></table></figure><style>  .markdown-body pre code {    font-family: Monaco, monospace !important;     font-size: 75% !important;     line-height: 1.8 !important; }</style>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/19/hello-world/"/>
    <url>/2023/05/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
